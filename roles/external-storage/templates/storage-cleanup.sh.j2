#!/bin/bash
# External Storage Cleanup Script
# Generated by Ansible - roles/external-storage

STORAGE_PATH="{{ external_storage.mount_point }}"
LOG_DIR="{{ external_storage.mount_point }}/{{ external_storage.storage_structure.logs }}"
TEMP_DIR="{{ external_storage.mount_point }}/{{ external_storage.storage_structure.temp }}"
CAMERA_DIR="{{ external_storage.mount_point }}/{{ external_storage.storage_structure.camera_footage }}"
CLEANUP_LOG="$LOG_DIR/storage-cleanup.log"

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Function to log with timestamp
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$CLEANUP_LOG"
}

# Function to clean temporary files
clean_temp_files() {
    local temp_retention_days={{ external_storage.storage_maintenance.temp_file_cleanup_days }}
    log_message "INFO: Cleaning temporary files older than $temp_retention_days days"
    
    if [ -d "$TEMP_DIR" ]; then
        local deleted_count=$(find "$TEMP_DIR" -type f -mtime +$temp_retention_days -delete -print | wc -l)
        log_message "INFO: Deleted $deleted_count temporary files"
        
        # Clean empty directories
        find "$TEMP_DIR" -type d -empty -delete 2>/dev/null || true
    else
        log_message "WARNING: Temp directory not found: $TEMP_DIR"
    fi
}

# Function to clean old log files
clean_old_logs() {
    local log_retention_days={{ external_storage.storage_maintenance.log_retention_days }}
    log_message "INFO: Cleaning log files older than $log_retention_days days"
    
    if [ -d "$LOG_DIR" ]; then
        # Keep the current cleanup log and health log, clean others
        local deleted_count=$(find "$LOG_DIR" -name "*.log" -not -name "storage-cleanup.log" -not -name "storage-health.log" -mtime +$log_retention_days -delete -print | wc -l)
        log_message "INFO: Deleted $deleted_count old log files"
        
        # Rotate current logs if they're too large (>10MB)
        for log_file in "$LOG_DIR/storage-health.log" "$LOG_DIR/storage-cleanup.log"; do
            if [ -f "$log_file" ] && [ $(stat -f%z "$log_file" 2>/dev/null || echo 0) -gt 10485760 ]; then
                mv "$log_file" "${log_file}.old"
                touch "$log_file"
                log_message "INFO: Rotated large log file: $(basename "$log_file")"
            fi
        done
    fi
}

# Function to clean old camera footage (if retention is enabled)
clean_camera_footage() {
    local camera_retention_days={{ external_storage.storage_maintenance.camera_retention_days }}
    
    if [ "$camera_retention_days" -gt 0 ] && [ -d "$CAMERA_DIR" ]; then
        log_message "INFO: Cleaning camera footage older than $camera_retention_days days"
        
        # Clean old recordings from subdirectories
        for camera_subdir in "$CAMERA_DIR"/*; do
            if [ -d "$camera_subdir" ]; then
                local camera_name=$(basename "$camera_subdir")
                local deleted_count=$(find "$camera_subdir" -type f \( -name "*.mp4" -o -name "*.mkv" -o -name "*.avi" -o -name "*.mov" \) -mtime +$camera_retention_days -delete -print | wc -l)
                if [ "$deleted_count" -gt 0 ]; then
                    log_message "INFO: Deleted $deleted_count old recordings from $camera_name"
                fi
                
                # Clean empty directories
                find "$camera_subdir" -type d -empty -delete 2>/dev/null || true
            fi
        done
    else
        log_message "INFO: Camera footage cleanup disabled or directory not found"
    fi
}

# Function to clean container temporary data
clean_container_temp() {
    local container_data_dir="{{ external_storage.mount_point }}/{{ external_storage.storage_structure.container_data }}"
    
    if [ -d "$container_data_dir" ]; then
        log_message "INFO: Cleaning container temporary data"
        
        # Clean common temporary directories in containers
        for temp_pattern in "*/tmp/*" "*/temp/*" "*/cache/*" "*/.tmp/*"; do
            local deleted_count=$(find "$container_data_dir" -path "*/$temp_pattern" -type f -mtime +7 -delete -print 2>/dev/null | wc -l)
            if [ "$deleted_count" -gt 0 ]; then
                log_message "INFO: Deleted $deleted_count temporary container files ($temp_pattern)"
            fi
        done
        
        # Clean empty directories
        find "$container_data_dir" -type d -empty -delete 2>/dev/null || true
    fi
}

# Function to optimize disk space
optimize_disk_space() {
    log_message "INFO: Running disk space optimization"
    
    # Get current disk usage
    local usage_before=$(df "$STORAGE_PATH" | awk 'NR==2 {print $5}' | sed 's/%//')
    local available_before=$(df -h "$STORAGE_PATH" | awk 'NR==2 {print $4}')
    
    log_message "INFO: Disk usage before cleanup: ${usage_before}%, Available: $available_before"
    
    # Run cleanup functions
    clean_temp_files
    clean_old_logs
    clean_camera_footage
    clean_container_temp
    
    # Get disk usage after cleanup
    local usage_after=$(df "$STORAGE_PATH" | awk 'NR==2 {print $5}' | sed 's/%//')
    local available_after=$(df -h "$STORAGE_PATH" | awk 'NR==2 {print $4}')
    local space_freed=$((usage_before - usage_after))
    
    log_message "INFO: Disk usage after cleanup: ${usage_after}%, Available: $available_after"
    log_message "INFO: Space freed: ${space_freed}% of total disk"
    
    # Check if we need to warn about low space
    if [ "$usage_after" -gt {{ external_storage.storage_quotas.warning_threshold | default(80) }} ]; then
        log_message "WARNING: Disk usage still high after cleanup: ${usage_after}%"
    fi
}

# Function to create disk usage report
create_usage_report() {
    local report_file="$LOG_DIR/disk-usage-report-$(date +%Y%m%d).txt"
    
    log_message "INFO: Creating disk usage report: $report_file"
    
    {
        echo "=== Disk Usage Report - $(date) ==="
        echo ""
        echo "Overall Usage:"
        df -h "$STORAGE_PATH"
        echo ""
        echo "Directory Usage:"
        du -sh "$STORAGE_PATH"/* 2>/dev/null | sort -hr
        echo ""
        echo "Largest Files (Top 20):"
        find "$STORAGE_PATH" -type f -exec ls -lh {} \; 2>/dev/null | sort -k5 -hr | head -20
        echo ""
        echo "=== End Report ==="
    } > "$report_file"
    
    log_message "INFO: Disk usage report created: $report_file"
}

# Main cleanup routine
main() {
    log_message "=== Starting storage cleanup ==="
    
    # Check if storage is mounted
    if [ ! -d "$STORAGE_PATH" ] || [ -z "$(ls -A "$STORAGE_PATH" 2>/dev/null)" ]; then
        log_message "ERROR: External storage not mounted at $STORAGE_PATH"
        exit 1
    fi
    
    # Run optimization
    optimize_disk_space
    
    # Create usage report
    create_usage_report
    
    log_message "=== Storage cleanup completed ==="
}

# Run main function
main

# If verbose flag is passed, also output summary to stdout
if [ "${1:-}" = "--verbose" ]; then
    echo "=== Storage Cleanup Summary ==="
    tail -n 10 "$CLEANUP_LOG"
    echo ""
    echo "Current disk usage:"
    df -h "$STORAGE_PATH"
fi