#!/usr/bin/env bash
# Interactive post-setup configuration script
# Handles personal settings that can't be automated

set -e

# Parse command line arguments
DRY_RUN=false
for arg in "$@"; do
    case $arg in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            ;;
    esac
done

# Show help if requested
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "dot-configure - Interactive post-setup configuration"
    echo ""
    echo "This script guides you through configuring:"
    echo "  • SSH keys and GitHub authentication"
    echo "  • API keys for development (Anthropic, OpenAI, GitHub)"
    echo "  • GPG commit signing setup"
    echo "  • VS Code extensions installation"
    echo "  • Git user configuration"
    echo ""
    echo "Options:"
    echo "  --dry-run    Show what would be done without making changes"
    echo "  -h, --help   Show this help message"
    echo ""
    echo "Run this after dot-bootstrap for complete setup."
    exit 0
fi

echo "🔧 dotfiles Post-Setup Configuration"
if [[ "$DRY_RUN" == "true" ]]; then
    echo "🔍 DRY RUN MODE - No changes will be made"
fi
echo "This script will help configure personal settings and API keys."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to prompt for input with default
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [[ -n "$default" ]]; then
        echo -e "${BLUE}$prompt [default: $default]:${NC}"
    else
        echo -e "${BLUE}$prompt:${NC}"
    fi
    
    read -r input
    if [[ -z "$input" && -n "$default" ]]; then
        input="$default"
    fi
    
    declare -g "$var_name=$input"
}

# Function to prompt for sensitive input
prompt_sensitive() {
    local prompt="$1"
    local var_name="$2"
    
    echo -e "${YELLOW}$prompt (input hidden):${NC}"
    read -s input
    declare -g "$var_name=$input"
    echo ""
}

# SSH Key Setup
echo -e "${GREEN}=== SSH Configuration ===${NC}"
if [[ ! -f "$HOME/.ssh/id_ed25519" ]]; then
    echo "No SSH key found."
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "🔍 Would generate new SSH key with email: woodrowpearson@gmail.com"
        echo "🔍 Would start ssh-agent and add key"
        echo "🔍 Would display public key for GitHub configuration"
    else
        echo "Generating new SSH key..."
        prompt_with_default "Email for SSH key" "woodrowpearson@gmail.com" "ssh_email"
        
        ssh-keygen -t ed25519 -C "$ssh_email" -f "$HOME/.ssh/id_ed25519" -N ""
        echo -e "${GREEN}✅ SSH key generated${NC}"
        
        # Start ssh-agent and add key
        eval "$(ssh-agent -s)"
        ssh-add "$HOME/.ssh/id_ed25519"
        
        echo -e "${YELLOW}📋 Your public SSH key:${NC}"
        cat "$HOME/.ssh/id_ed25519.pub"
        echo ""
        echo -e "${BLUE}Add this key to GitHub: https://github.com/settings/ssh/new${NC}"
        read -p "Press Enter when you've added the key to GitHub..."
    fi
else
    echo -e "${GREEN}✅ SSH key already exists${NC}"
fi

# API Keys Configuration
echo -e "${GREEN}=== API Keys Configuration ===${NC}"
ENV_FILE="$HOME/code/.env"

if [[ -f "$ENV_FILE" ]]; then
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "🔍 Would configure API keys in $ENV_FILE"
        echo "🔍 Would backup existing .env file"
    else
        echo "Configuring API keys in $ENV_FILE"
        
        # Backup existing .env
        cp "$ENV_FILE" "$ENV_FILE.backup"
    fi
    
    # Anthropic API Key
    if grep -q "ANTHROPIC_API_KEY=" "$ENV_FILE" && [[ $(grep "ANTHROPIC_API_KEY=" "$ENV_FILE" | cut -d'=' -f2) == "" ]]; then
        if [[ "$DRY_RUN" == "true" ]]; then
            echo "🔍 Would prompt to configure Anthropic Claude API key"
        else
            echo -e "${BLUE}Configure Anthropic Claude API key? (y/n)${NC}"
            read -r configure_anthropic
            if [[ "$configure_anthropic" == "y" ]]; then
                prompt_sensitive "Enter Anthropic API key" "anthropic_key"
                sed -i.bak "s/ANTHROPIC_API_KEY=.*/ANTHROPIC_API_KEY=$anthropic_key/" "$ENV_FILE"
                echo -e "${GREEN}✅ Anthropic API key configured${NC}"
            fi
        fi
    fi
    
    # OpenAI API Key
    if grep -q "OPENAI_API_KEY=" "$ENV_FILE" && [[ $(grep "OPENAI_API_KEY=" "$ENV_FILE" | cut -d'=' -f2) == "" ]]; then
        if [[ "$DRY_RUN" == "true" ]]; then
            echo "🔍 Would prompt to configure OpenAI API key"
        else
            echo -e "${BLUE}Configure OpenAI API key? (y/n)${NC}"
            read -r configure_openai
            if [[ "$configure_openai" == "y" ]]; then
                prompt_sensitive "Enter OpenAI API key" "openai_key"
                sed -i.bak "s/OPENAI_API_KEY=.*/OPENAI_API_KEY=$openai_key/" "$ENV_FILE"
                echo -e "${GREEN}✅ OpenAI API key configured${NC}"
            fi
        fi
    fi
    
    # GitHub Token
    if grep -q "GITHUB_TOKEN=" "$ENV_FILE" && [[ $(grep "GITHUB_TOKEN=" "$ENV_FILE" | cut -d'=' -f2) == "" ]]; then
        if [[ "$DRY_RUN" == "true" ]]; then
            echo "🔍 Would prompt to configure GitHub token"
        else
            echo -e "${BLUE}Configure GitHub token? (y/n)${NC}"
            read -r configure_github
            if [[ "$configure_github" == "y" ]]; then
                prompt_sensitive "Enter GitHub token" "github_token"
                sed -i.bak "s/GITHUB_TOKEN=.*/GITHUB_TOKEN=$github_token/" "$ENV_FILE"
                echo -e "${GREEN}✅ GitHub token configured${NC}"
            fi
        fi
    fi
    
    # Clean up backup files
    if [[ "$DRY_RUN" != "true" ]]; then
        rm -f "$ENV_FILE.bak"
    fi
fi

# Git Configuration
echo -e "${GREEN}=== Git Configuration ===${NC}"
current_name=$(git config --global user.name 2>/dev/null || echo "")
current_email=$(git config --global user.email 2>/dev/null || echo "")

if [[ -z "$current_name" ]]; then
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "🔍 Would set git user name to: woodrow pearson"
    else
        prompt_with_default "Git user name" "woodrow pearson" "git_name"
        git config --global user.name "$git_name"
    fi
fi

if [[ -z "$current_email" ]]; then
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "🔍 Would set git user email to: woodrowpearson@gmail.com"
    else
        prompt_with_default "Git user email" "woodrowpearson@gmail.com" "git_email"
        git config --global user.email "$git_email"
    fi
fi

# GPG Signing Setup (optional)
if [[ "$DRY_RUN" == "true" ]]; then
    echo "🔍 Would prompt to set up GPG commit signing"
    echo "🔍 Would check for existing GPG keys"
    echo "🔍 Would generate GPG key if none exists"
else
    echo -e "${BLUE}Set up GPG commit signing? (y/n)${NC}"
    read -r setup_gpg
fi
if [[ "$setup_gpg" == "y" ]] && [[ "$DRY_RUN" != "true" ]]; then
    if ! command -v gpg &> /dev/null; then
        echo -e "${RED}GPG not found. Install with: brew install gnupg${NC}"
    else
        # Check if GPG key exists
        if ! gpg --list-secret-keys --keyid-format LONG | grep -q "sec"; then
            echo "Generating GPG key..."
            prompt_with_default "Real name for GPG key" "woodrow pearson" "gpg_name"
            prompt_with_default "Email for GPG key" "woodrowpearson@gmail.com" "gpg_email"
            
            # Generate GPG key
            cat > /tmp/gpg-gen-key << EOF
Key-Type: RSA
Key-Length: 4096
Subkey-Type: RSA
Subkey-Length: 4096
Name-Real: $gpg_name
Name-Email: $gpg_email
Expire-Date: 0
%no-protection
%commit
EOF
            gpg --batch --gen-key /tmp/gpg-gen-key
            rm /tmp/gpg-gen-key
            
            # Get key ID and configure git
            KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep "sec" | head -1 | awk '{print $2}' | cut -d'/' -f2)
            git config --global user.signingkey "$KEY_ID"
            git config --global commit.gpgsign true
            
            echo -e "${GREEN}✅ GPG signing configured${NC}"
            echo -e "${YELLOW}📋 Your GPG public key:${NC}"
            gpg --armor --export "$KEY_ID"
            echo -e "${BLUE}Add this key to GitHub: https://github.com/settings/gpg/new${NC}"
        else
            echo -e "${GREEN}✅ GPG key already exists${NC}"
        fi
    fi
fi

# VS Code Extensions
echo -e "${GREEN}=== VS Code Extensions ===${NC}"

# Check if VS Code is installed and code command is available
if [[ ! -d "/Applications/Visual Studio Code.app" ]]; then
    echo -e "${YELLOW}⚠️  VS Code not found. Skipping extension installation.${NC}"
elif ! command -v code &> /dev/null; then
    echo "Setting up VS Code command line tool..."
    # Try to create symlink for code command
    if [[ -w "/opt/homebrew/bin" ]]; then
        ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /opt/homebrew/bin/code
        echo -e "${GREEN}✅ VS Code command line tool linked${NC}"
    elif [[ -w "/usr/local/bin" ]]; then
        ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /usr/local/bin/code
        echo -e "${GREEN}✅ VS Code command line tool linked${NC}"
    else
        echo -e "${RED}❌ Could not link VS Code command line tool. Please run VS Code and use Command Palette > 'Shell Command: Install code command in PATH'${NC}"
        echo "Skipping extension installation."
    fi
fi

if [[ "$DRY_RUN" == "true" ]]; then
    echo "🔍 Would prompt to install recommended VS Code extensions"
    echo "🔍 Would install extensions: ms-python.python, charliermarsh.ruff, rust-lang.rust-analyzer, etc."
else
    echo -e "${BLUE}Install recommended VS Code extensions? (y/n)${NC}"
    read -r install_extensions
fi
if [[ "$install_extensions" == "y" ]] && [[ "$DRY_RUN" != "true" ]] && command -v code &> /dev/null; then
    EXTENSIONS=(
        "ms-python.python"
        "ms-python.black-formatter"
        "charliermarsh.ruff"
        "ms-python.mypy-type-checker"
        "bradlc.vscode-tailwindcss"
        "esbenp.prettier-vscode"
        "rust-lang.rust-analyzer"
        "golang.go"
        "redhat.vscode-yaml"
        "ms-vscode.vscode-typescript-next"
        "GitLab.gitlab-workflow"
        "eamodio.gitlens"
        "yzhang.markdown-all-in-one"
    )
    
    for ext in "${EXTENSIONS[@]}"; do
        echo "Installing $ext..."
        if ! code --install-extension "$ext" --force; then
            echo -e "${YELLOW}⚠️  Failed to install $ext, continuing...${NC}"
        fi
    done
    
    echo -e "${GREEN}✅ VS Code extensions installed${NC}"
fi

echo ""
echo -e "${GREEN}🎉 Post-setup configuration complete!${NC}"
echo -e "${BLUE}💡 Next steps:${NC}"
echo "   • Test SSH connection: ssh -T git@github.com"
echo "   • Create a new project: newproject python my-app"
echo "   • Review your environment: code ~/code/.env"
echo ""